# AppVeyor file
# based on the official example https://www.appveyor.com/docs/appveyor-yml/

#---------------------------------#
#      general configuration      #
#---------------------------------#

# Build version format
# you can use {branch} name in version format too
version: 1.0.{build}-{branch}

# branches to build
branches:
  # whitelist
  #only:
  #  - master
  #  - production

  # blacklist
  except:
    - gh-pages

# Do not build on tags (GitHub and BitBucket)
#skip_tags: true

# Skipping commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
skip_commits:
  files:
     - .circleci/*
     - travisci/*
     - .travis.yml
     - Jenkinsfile
     - Jenkinsfile-local-macOS
     - .codeclimate.yml
     - .editorconfig
     - .prettierignore
     - .prettierrc.json
     - .sass-lint.yml
     - .snyk
     - sonar-project.properties

# Including commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#only_commits:
#  files:
#    - Project-A/
#    - Project-B/

# Do not build feature branch with open Pull Requests
#skip_branch_with_pr: true

# Maximum number of concurrent jobs for the project
#max_jobs: 1

#---------------------------------#
#    environment configuration    #
#---------------------------------#


# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.autocrlf input

# fetch repository as zip archive
#shallow_clone: true  # default is false

# set clone depth
clone_depth: 5  # clone entire repository history if not defined

# environment variables
environment:
  matrix:
    - nodejs_version: "10"
  NODE_ENV: test
  CI: yes
  APPVEYOR: yes
  CC_TEST_REPORTER_ID:
    secure: 599YTB1w26VDxTafTrBNso5CW8BnztpspX2ajIcowkhI249QaKE+nOjN7oQSN1MMm9k7ekutSCpU185qsG4yvVpg4prdOQUs+VkNtLQgz9s=
  COVERALLS_REPO_TOKEN:
    secure: Edx2E7hPwjoxiEWq2pHhd7iugZKunJrlX/OVlja2dOjGwXe6/QNgJ1lrEdeEFDwB

# this is how to allow failing jobs in the matrix
matrix:
  fast_finish: true     # set this flag to immediately finish build once one of the jobs fails.

# build cache to preserve files/folders between builds
#cache: node_modules -> package.json

# enable service required for build/tests
#services:

# scripts that run after cloning repository
install:
  # by default, all script lines are interpreted as batch
  - echo Start install
  # to run script as a PowerShell command prepend it with ps:
  - ps: Write-Host 'Start install in PowerShell'
  # batch commands start from cmd:
  - cmd: echo Start install in cmd
  # install nodejs and dependencies both global and local
  # use appveyor-retry to retry if npm ci fails
  - cmd: appveyor-retry powershell Install-Product node $env:nodejs_version
  - npm install -g npm@6.8.0
  - set PATH=%APPDATA%\npm;%PATH%
  - npm install -g @angular/cli@7.3.3
  - npm ci
  # rebuild again node-sass
  - npm rebuild node-sass --force


#---------------------------------#
#       build configuration       #
#---------------------------------#
# build platform, i.e. x86, x64, Any CPU. This setting is optional.
platform:
  - x86
  - x64

build: off

# scripts to run before build
before_build:

# scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages, Azure Cloud Services)
before_package:

# scripts to run after build
after_build:

# to run your custom scripts instead of automatic MSBuild
build_script:
  # Output useful info for debugging.
  - node --version && npm --version
  - ps: "npm --version # PowerShell" # Pass comment to PS for easier debugging
  # prepare
  - npm run clean:all
  - cd examples/systemjs
  - npm ci
  - cd ../..
  - cd examples/angular-cli
  - npm ci
  - cd ../..
  - cd examples/angular-cli-material
  - npm ci
  - cd ../..
  - cd examples/universal
  - npm ci
  - cd ../..
  # build
  - npm run build:all
  # Note: unit testing and e2e testing scripts are below in "test_script"
  # -------------------- examples ----------------------
  # build main angular-cli with ng-packagr
  - npm run build:main:dev
  - npm run build:main:prod
  # build official angular-cli example
  - cd examples/angular-cli
  - npm run build:dev
  - npm run build:prod
  - cd ../..
  - # build official angular-cli-6 example
  - cd examples/angular-cli-6
  - npm run build:dev
  - npm run build:prod
  - cd ../..
  # build official angular-cli-material example
  - cd examples/angular-cli-material
  - npm run build:dev
  - npm run build:prod
  - cd ../..
  # build official universal example
  - cd examples/universal
  - npm run build:dev
  - npm run build:prod
  - npm run build:ssr
  - npm run build:prerender
  - cd ../..


#---------------------------------#
#       tests configuration       #
#---------------------------------#

# scripts to run before tests
before_test:

# scripts to run after tests
after_test:

test_script:
  # Output useful info for debugging.
  - node --version && npm --version
  - ps: "npm --version # PowerShell" # Pass comment to PS for easier debugging
  # init codeclimate test reporter
  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  - chmod +x ./cc-test-reporter
  - ./cc-test-reporter before-build
  # run tests
  - npm run test:ci
  # run e2e tests
  - npm run e2e:ci

#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

#artifacts:

#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!
#deploy:

# scripts to run before deployment
before_deploy:

# scripts to run after deployment
after_deploy:

# to run your custom scripts instead of provider deployments
deploy_script:

#---------------------------------#
#        global handlers          #
#---------------------------------#

# on successful build
on_success:
  - npm run docs:typedoc
  # TODO restore compodoc - why on appveyor isn't working???
#  - npm run docs:compodoc
  # publish test results on codeclimate
  - cc-test-reporter after-build --exit-code $TRAVIS_TEST_RESULT

# on build failure
#on_failure:
  # - do something

# after build failure or success
#on_finish:
  # - do something

#---------------------------------#
#         notifications           #
#---------------------------------#

#notifications:
# # Slack
#  - provider: Slack
#    incoming_webhook: http://incoming-webhook-url
#
#  # ...or using auth token
#
#  - provider: Slack
#    auth_token:
#      secure: kBl9BlxvRMr9liHmnBs14A==
#    channel: development
#    template: "{message}, {commitId}, ..."
